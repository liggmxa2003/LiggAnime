<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lwz.dao.AinmeDao">

<!--     定义一个名为"anime"的结果映射，映射到"com.lwz.pojo.Anime"类 -->
    <resultMap id="anime" type="com.lwz.pojo.Anime">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="flag" column="flag"/>
        <result property="views" column="views"/>
        <result property="updateTime" column="update_time"/>
        <result property="typeId" column="type_id"/>
        <result property="firstPicture" column="first_picture"/>
<!--        <result property="video" column="Video"/>-->
        <result property="shareStatement" column="share_statement"/>
        <result property="published" column="published"/>
        <result property="appreciation" column="appreciation"/>
        <result property="commentabled" column="commentabled"/>
        <result property="description" column="description"/>
        <result property="recommend" column="recommend"/>
        <result property="createTime" column="create_time"/>
        <result property="typeId" column="type_id"/>
        <result property="userId" column="user_id"/>
        <result property="tagIds" column="tag_ids"/>
        <association property="type" javaType="com.lwz.pojo.Type">
            <id property="id" column="typeid"/>
            <result property="name" column="typename"/>
        </association>
        <association property="user" javaType="com.lwz.pojo.User">
            <id property="id" column="uid"/>
            <result property="nickname" column="nickname"/>
            <result property="username" column="username"/>
            <result property="email" column="email"/>
            <result property="avatar" column="avatar"/>
        </association>
        <collection property="tags" ofType="com.lwz.pojo.Tag">
            <id property="id" column="tagid"/>
            <result property="name" column="tagname"/>
        </collection>
    </resultMap>

<!--    删除指定ID的番剧文章-->
    <delete id="deleteBlog">
        delete from t_anime where id = #{id}
    </delete>

    <select id="getIndexBlog" resultMap="anime">  /*主页番剧展示*/
        select b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        t.name typename, t.id typeid,
        u.nickname, u.avatar
        from t_anime b, t_type t, t_user u
        where b.type_id = t.id and  u.id = b.user_id order by b.update_time desc
    </select>

    <select id="getAllBlog" resultMap="anime">  /*后台番剧展示*/
        select b.id, b.title, b.update_time, b.recommend, b.type_id, b.published,
               t.id typeid, t.name typename
        from  t_anime b, t_type t
        where b.type_id = t.id    /*番剧类型id=类型id*/
    </select>

    <!--    根据类型ID获取动漫信息的查询语句-->
    <select id="getByTypeId" resultMap="anime">
        select b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        t.name typename, t.id typeid,
        u.nickname, u.avatar
        from  t_anime b, t_type t, t_user u
        where b.type_id = t.id and u.id = b.user_id and b.type_id = #{typeId}
        order by b.update_time desc
    </select>
    <!--     根据标签ID查询动漫信息   -->
    <select id="getByTagId" resultMap="anime">
        select b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        t.name typename, t.id typeid,
        t1.name tagname, t1.id tagid,
        u.nickname, u.avatar
        from  t_anime b, t_type t, t_user u,  t_anime_tags tb, t_tag t1
        where b.type_id = t.id and u.id = b.user_id and tb.anime_id = b.id and tb.tag_id = t1.id and t1.id = #{tagId}
        order by b.update_time desc
    </select>

    <!--    查询所有推荐的动漫番剧信息，并按照更新时间降序排序，暂时废弃。-->
    <select id="getAllRecommendBlog" resultMap="anime">
        select id, title, recommend from  t_anime order by update_time desc;
    </select>

    <select id="getBlog" resultMap="anime"> /*后台展示番剧*/
        select b.id, b.published, b.flag, b.title, b.content, b.type_id,
         b.tag_ids, b.first_picture, b.description, b.recommend,
         b.share_statement, b.appreciation, b.commentabled
        from  t_anime b  where  b.id = #{id};
    </select>

    <select id="getDetailedBlog" resultMap="anime" parameterType="com.lwz.pojo.Anime">  /*番剧详情*/
        select b.id, b.first_picture, b.flag, b.title, b.content, b.views,
        b.update_time,b.commentabled, b.share_statement, b.appreciation,
        u.nickname, u.avatar,
        tag.id tagid, tag.name tagname
        from  t_anime b, t_user u, t_tag tag,  t_anime_tags tb
        where b.user_id = u.id and tb.anime_id = b.id and tb.tag_id = tag.id and  b.id = #{id}
    </select>

    <!-- 定义一个名为getSearchBlog的查询语句，用于搜索番剧 -->
    <select id="getSearchBlog" resultMap="anime">
        <!-- 绑定一个名为pattern的变量，用于构建模糊查询的模式 -->
        <bind name="pattern" value="'%' + query + '%'" />
        <!--
            执行SQL查询，选择番剧的id、标题、首图、浏览量、更新时间、描述，
            类型名称，用户昵称和头像
            从番剧表t_anime、类型表t_type和用户表t_user中
            条件是番剧的类型ID等于类型的ID并且用户的ID等于番剧的用户ID
            并且番剧的标题或内容匹配模糊查询模式
            结果按更新时间降序排序
        -->
        select b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        t.name typename,
        u.nickname, u.avatar
        from  t_anime b, t_type t, t_user u
        where b.type_id = t.id and  u.id = b.user_id and (b.title like #{pattern} or b.content like  #{pattern})
        order by b.update_time desc
    </select>

    <select id="searchAllBlog" parameterType="com.lwz.pojo.Anime" resultMap="anime">
        <bind name="pattern" value="'%' + title + '%'" />    /*模糊查询*/
        select b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name
        from  t_anime b ,t_type t
        <where>
            <if test="1 == 1">
                b.type_id = t.id    /*番剧类型id=类型id*/
            </if>
            <if test="typeId != null">
                and b.type_id = #{typeId}       /*根据番剧类型查询*/
            </if>
            <if test="recommend != null">
                and b.recommend = #{recommend}   /*根据番剧推荐查询*/
            </if>
            <if test="title != null">
                and b.title like #{pattern}   /*根据番剧title模糊查询*/
            </if>
        </where>
    </select>

    <update id="updateBlog" parameterType="com.lwz.pojo.Anime">
        update  t_anime set published = #{published},flag = #{flag} ,
        title = #{title}, content = #{content}, type_id = #{typeId}, tag_ids = #{tagIds},
        first_picture = #{firstPicture} , description = #{description} , recommend = #{recommend} ,
        share_statement = #{shareStatement}, appreciation = #{appreciation},
        commentabled = #{commentabled} ,update_time = #{updateTime} where id = #{id};
    </update>

    <!--useGeneratedKeys="true"；使用自增主键获取主键值策略
        keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
    -->
    <insert id="saveBlog" parameterType="com.lwz.pojo.Anime" useGeneratedKeys="true" keyProperty="id">
        insert into  t_anime (title, content, first_picture, flag,
        views, appreciation, share_statement, commentabled,published,
        recommend, create_time, update_time, type_id, tag_ids, user_id, description)
        values (#{title}, #{content}, #{firstPicture}, #{flag}, #{views}, #{appreciation},
        #{shareStatement}, #{commentabled}, #{published}, #{recommend}, #{createTime},
        #{updateTime}, #{typeId}, #{tagIds}, #{userId}, #{description});
    </insert>

<!--    MyBatis插入映射语句，用于保存番剧和标签的关联信息-->
    <insert id="saveBlogAndTag" parameterType="com.lwz.pojo.AnimeAndTag">
        insert into  t_anime_tags (tag_id, anime_id) values (#{tagId},#{blogId});
    </insert>

<!--    查询并返回t_anime表中按更新时间降序排列的年份-->
    <select id="findGroupYear" resultType="String">
        select DATE_FORMAT(b.update_time, '%Y') from  t_anime b order by b.update_time desc
    </select>

<!--    根据年份查询动画信息-->
    <select id="findByYear" resultMap="anime">
        select b.title, b.update_time, b.id, b.flag
        from  t_anime b
        where DATE_FORMAT(b.update_time, "%Y") = #{year}
    </select>








</mapper>